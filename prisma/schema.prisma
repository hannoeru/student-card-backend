// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  name             String
  username         String?
  email            String            @unique
  birthdate        DateTime?
  password         String?
  avatar           String?
  role             Role              @default(STUDENT)
  school           School?           @relation(fields: [schoolId], references: [id])
  schoolId         String?
  studentIDCards   StudentIDCard?
  oauths           OAuth[]
  officialAbsences OfficialAbsence[]
  books            Book[]

  @@map("users")
}

model School {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  name           String          @unique
  code           String          @unique
  address        String
  phone          String
  logo           String
  headOfSchool   String          @map("head_of_school")
  studentIDCards StudentIDCard[]
  students       User[]

  @@map("schools")
}

model StudentIDCard {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  name          String
  studentNumber String   @unique @map("student_number")
  department    String
  approved      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @map("user_id")
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String   @map("school_id")

  @@map("student_id_cards")
}

model OAuth {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  provider     String
  accessToken  String?
  refreshToken String?
  oauthUserId  String   @unique @map("oauth_user_id")
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @map("user_id")

  @@map("oauths")
}

model OfficialAbsence {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  class     String
  dateTime  DateTime @map("date_time")
  reason    String

  @@map("official_absences")
}

model Book {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @map("user_id")
  title        String
  introduction String
  imageUrl     String    @map("image_url")
  tags         BookTag[] @relation("book_tags")

  @@map("books")
}

model BookTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  slug      String
  books     Book[]   @relation("book_tags")

  @@map("book_tags")
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  schedule  String
}
